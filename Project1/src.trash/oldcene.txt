
      <node id="ss1">
        <!-- bloco "transforms" obrigatorio -->
        <transforms>
          <!-- deve conter transformacoes explicitas usando as instrucoes seguintes sem limite nem ordem -->
          <!-- ex: bloco transforms pode ficar sem conteudo -->
          <!-- ex: bloco transforms pode ser R,T (nao tem S) -->
          <!-- ex: bloco transforms pode ser R,S,T,S -->
          <!-- <transform type="translate" to="ff ff ff" />
                <transform type="rotate" axis="ee" angle="ff" />
                 -->
          <transform type="scale" factor="1 0.5 1" />
        </transforms>

        <!-- declaracao da aparencia a utilizar -->
        <!-- se id="inherit", o no' mantem (herda) a aparencia do "pai" -->

        <appearanceref id="random_appearance" />


        <!-- conteudo do no; deve existir pelo menos um bloco "primitives" ou um "desce ndants" -->
        <!-- podem existir ambos -->

        <!-- bloco "primitives" -->
        <primitives>
          <!-- podem existir varias primitivas -->
         <!-- <triangle xyz3="0 0 0" xyz2="2 0 0" xyz1="0 2.4 0" /> -->


          <!-- Primitivas : rectangle, triangle, cylinder, sphere, torus -->
          <!--   Comandos a serem interpretados genericamente como em OpenGL/GLUT, exceto -->
          <!--   o cilindro, que deve adicionalmente ter topos ou tampas) -->
          <rectangle xy1="5 5" xy2="10 10"></rectangle>
               
          
          
          <!-- deve ter topos -->
         <!-- <cylinder base="3" top="3" height="8" slices="10" stacks="10" />
          <cylinder base="3" top="3" height="8" slices="10" stacks="10" />-->
          <sphere radius="4.5" slices="10" stacks="10" />
          <sphere radius="4.5" slices="10" stacks="10" />
          <!-- <torus inner="2.5" outer="10" slices="10" loops="10" /> -->
        </primitives>


        <descendants>
          <!--<noderef id="ss1"> </noderef>-->
          
        </descendants>
      </node>
      
      
        <!-- tem de existir, pelo menos, um bloco "node" -->
        <node id="ss">
            <!-- bloco "transforms" obrigatorio -->
            <transforms>
                <!-- deve conter transformacoes explicitas usando as instrucoes seguintes sem limite nem ordem -->
                <!-- ex: bloco transforms pode ficar sem conteudo -->
                <!-- ex: bloco transforms pode ser R,T (nao tem S) -->
                <!-- ex: bloco transforms pode ser R,S,T,S -->
                <!-- 
                <transform type="rotate" axis="ee" angle="ff" />
                <transform type="scale" factor="ff ff ff" /> -->
            <!--  <transform type="rotate" axis="xx" angle="90" />
              <transform type="translate" to="1 1 1" />
              <transform type="scale" factor="10 10 5" /> -->
            </transforms>
          
            <!-- declaracao da aparencia a utilizar -->
            <!-- se id="inherit", o no' mantem (herda) a aparencia do "pai" -->

            <appearanceref id="random_appearance" />
 
                              
             <!-- conteudo do no; deve existir pelo menos um bloco "primitives" ou um "descendants" -->
             <!-- podem existir ambos -->

             <!-- bloco "primitives" --> 
            <primitives>
                <!-- podem existir varias primitivas -->
              <triangle xyz3="0 0 0" xyz2="3 0 0" xyz1="0 0 3" />
              <triangle xyz3="0 0 3" xyz2="3 0 3" xyz1="0 0 6" />
              <triangle xyz3="0 0 6" xyz2="3 0 6" xyz1="0 0 9" />
              <triangle xyz1="3 0 3" xyz2="3 0 0" xyz3="0 0 3" />
              <triangle xyz1="3 0 6" xyz2="3 0 3" xyz3="0 0 6" />
              <triangle xyz1="3 0 6" xyz2="3 0 3" xyz3="0 0 6" />
              <triangle xyz1="3 0 0" xyz2="3 0 3" xyz3="6 0 0" />
              <triangle xyz3="6 0 3" xyz2="3 0 3" xyz1="6 0 0" />
              <triangle xyz1="3 0 3" xyz2="3 0 6" xyz3="6 0 6" />
              <triangle xyz1="3 0 3" xyz2="6 0 6" xyz3="6 0 3" />
              <triangle xyz1="6 0 3" xyz2="6 0 6" xyz3="9 0 6" />
              <triangle xyz1="6 0 3" xyz2="9 0 6" xyz3="9 0 3" />
              <triangle xyz1="3 0 6" xyz2="3 0 9" xyz3="6 0 9" />
              <triangle xyz1="3 0 6" xyz2="6 0 9" xyz3="6 0 6" />
              <triangle xyz1="6 0 6" xyz2="6 0 9" xyz3="9 0 9" />
              <triangle xyz1="6 0 6" xyz2="9 0 9" xyz3="9 0 6" />
      <!--        
              <triangle xyz1="0 0 0" xyz2="0 0 2" xyz3="1 2.4 0" />
              <triangle xyz1="0 0 2" xyz2="1 2.4 2" xyz3="1 2.4 0" />
              
              <triangle xyz1="0 0 2" xyz2="2 0 2" xyz3="1 2.4 2" />

     -->
              
              <!-- Primitivas : rectangle, triangle, cylinder, sphere, torus -->
              <!--   Comandos a serem interpretados genericamente como em OpenGL/GLUT, exceto -->
              <!--   o cilindro, que deve adicionalmente ter topos ou tampas) -->
              <!-- <rectangle xy1="ff ff" xy2="ff ff" />
               
                <cylinder base="ff" top="ff" height="ff" slices="ii" stacks="ii" /> -->     <!-- deve ter topos -->
               <!-- <sphere radius="ff" slices="ii" stacks="ii" />
                <torus inner="ff" outer="ff" slices="ii" loops="ii" />-->
             </primitives>
               
             <!-- bloco "descendants" -->
            <descendants>
                <!-- Referencia a outros elementos do grafo -->
                <!-- (repetir o no. de vezes necessario) -->
                <!-- LEMBRANDO: qualquer no' pode ser referenciado previamente 'a sua declaracao; isto -->
                <!--            e', a ordem pela qual os nos sao declarados e' irrelevante -->
              <noderef id="ss1"> </noderef>
            </descendants>
        </node>
