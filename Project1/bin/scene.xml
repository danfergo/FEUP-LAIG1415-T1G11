<!-- Os comentarios devem ter espacos no inicio e no fim, para   -->
<!--    separar dos hifens                                       -->
<!-- Nao devem ser usados caracteres especiais (p.ex. acentos)   -->
<!-- Todas as tags e atributos sao obrigatorios, exceto onde for -->
<!--    referido o contrario                                     -->
<!-- Os identificadores "id" nao devem ser repetidos, pelo       -->
<!--    menos em entidades do mesmo tipo                         -->


<anf>

    <!-- bloco de configuracoes globais -->
    <!-- a declaracao dos componentes deste bloco e' obrigatoria --> 
     <globals>
        <!-- Parametros de desenho -->
        <!-- Valores para mode: "fill" , "line", "point" -->
        <!-- Valores para shading: "flat", "gouraud" ) -->
          <drawing mode="ss" shading="ss" background="ff ff ff ff" />
 
        <!-- Parametros de culling -->
        <!-- Valores para cullface: "none", "back" , "front" ou "both" -->
        <!-- Valores para cullorder : "ccw" ou "cw" -->
           <culling face="ss" order="ss" />
 
        <!-- Parametros de iluminacao; seguem os parametros do OpenGL  -->
            <lighting doublesided="tt" local="tt" enabled="tt" ambient="ff ff ff ff" />			
    </globals> 
    
    <!-- bloco de camaras: o atributo "initial" identifica a camara/ponto de vista inicial, que tem de existir -->
    <cameras initial="ss" >
        <!-- tem de existir, pelo menos uma camara dos tipos seguintes (perspective ou ortho) -->
	
         <perspective id="ss" near="ff" far="ff" angle="ff" pos="ff ff ff" target="ff ff ff" /> 
         <ortho id="ss" near="ff" far="ff" left="ff" right="ff" top="ff" bottom="ff" /> 

    </cameras>
  

    <!-- bloco de luzes -->
    <lights>
            <!-- Deve existir pelo menos uma luz declarada -->
            <light id="ss" type="omni" enabled="true" marker="true" pos="5 2 5" >
              <component type="ambient" value="0.1 0.1 0.9 0.1" />
              <component type="diffuse" value="0.9 0.9 0.9 0.9" />
              <component type="specular" value="0.9 0.9 0.9 0.9" />

            </light>

            <light id="ss" type="spot" enabled="true" marker="true" pos="5 1 5" target="7 0 7"
                angle="10" exponent="9" >
              <component type="ambient" value="0.01 0.01 0.01 0.01" />
              <component type="diffuse" value="0.9 0.9 0.9 0.9" />
              <component type="specular" value="0.9 0.9 0.9 0.9" />
            </light>
    </lights>

    <!-- bloco de texturas. Este bloco tem de existir mas pode estar vazio, se nao forem usadas texturas -->
    <!--   ver topico 'Notas finais' no enunciado sobre os parametros texlength_... -->
    <textures>       
           <texture id="random_texture" file="texture.jpg" texlength_s="1" texlength_t="2" />
    </textures>

    <!-- bloco de materiais; -->
    <appearances>
        <!-- deve existir um ou mais blocos "appearance" -->
        <!-- IMPORTANTE: -->
        <!--   textureref e opcional, a utilizar caso haja textura associada a esta aparencia --> 
         <appearance id="random_appearance" shininess="ff" textureref="" >
               <component type="ambient" value="0.9 0.1 0.1 0.9" />
               <component type="diffuse" value="0.9 0.1 0.1 0.9" />
               <component type="specular" value="0.1 0.1 0.1 0.1" />
        </appearance> 
    </appearances>

    <!-- bloco do grafo; "rootid" identifica o no de raiz -->
    <graph rootid="ss">

      <node id="ss1">
        <!-- bloco "transforms" obrigatorio -->
        <transforms>
          <!-- deve conter transformacoes explicitas usando as instrucoes seguintes sem limite nem ordem -->
          <!-- ex: bloco transforms pode ficar sem conteudo -->
          <!-- ex: bloco transforms pode ser R,T (nao tem S) -->
          <!-- ex: bloco transforms pode ser R,S,T,S -->
          <!-- <transform type="translate" to="ff ff ff" />
                <transform type="rotate" axis="ee" angle="ff" />
                 -->
          <transform type="scale" factor="1 1 1" />
        </transforms>

        <!-- declaracao da aparencia a utilizar -->
        <!-- se id="inherit", o no' mantem (herda) a aparencia do "pai" -->

        <appearanceref id="random_appearance" />


        <!-- conteudo do no; deve existir pelo menos um bloco "primitives" ou um "desce ndants" -->
        <!-- podem existir ambos -->

        <!-- bloco "primitives" -->
        <primitives>
          <!-- podem existir varias primitivas -->
         <!-- <triangle xyz3="0 0 0" xyz2="2 0 0" xyz1="0 2.4 0" /> -->


          <!-- Primitivas : rectangle, triangle, cylinder, sphere, torus -->
          <!--   Comandos a serem interpretados genericamente como em OpenGL/GLUT, exceto -->
          <!--   o cilindro, que deve adicionalmente ter topos ou tampas) -->
          <!-- <rectangle xy1="ff ff" xy2="ff ff" />
               
                <cylinder base="ff" top="ff" height="ff" slices="ii" stacks="ii" /> -->
          <!-- deve ter topos -->
          <!-- <sphere radius="ff" slices="ii" stacks="ii" />
                <torus inner="ff" outer="ff" slices="ii" loops="ii" />-->
        </primitives>


        <descendants>
          <!--<noderef id="ss1"> </noderef>-->
          
        </descendants>
      </node>
      
      
        <!-- tem de existir, pelo menos, um bloco "node" -->
        <node id="ss">
            <!-- bloco "transforms" obrigatorio -->
            <transforms>
                <!-- deve conter transformacoes explicitas usando as instrucoes seguintes sem limite nem ordem -->
                <!-- ex: bloco transforms pode ficar sem conteudo -->
                <!-- ex: bloco transforms pode ser R,T (nao tem S) -->
                <!-- ex: bloco transforms pode ser R,S,T,S -->
                <!-- 
                <transform type="rotate" axis="ee" angle="ff" />
                <transform type="scale" factor="ff ff ff" /> -->
            <!--  <transform type="rotate" axis="xx" angle="90" />
              <transform type="translate" to="1 1 1" />
              <transform type="scale" factor="10 10 5" /> -->
            </transforms>
          
            <!-- declaracao da aparencia a utilizar -->
            <!-- se id="inherit", o no' mantem (herda) a aparencia do "pai" -->

            <appearanceref id="random_appearance" />
 
                              
             <!-- conteudo do no; deve existir pelo menos um bloco "primitives" ou um "descendants" -->
             <!-- podem existir ambos -->

             <!-- bloco "primitives" --> 
            <primitives>
                <!-- podem existir varias primitivas -->
              <triangle xyz3="0 0 0" xyz2="3 0 0" xyz1="0 0 3" />
              <triangle xyz3="0 0 3" xyz2="3 0 3" xyz1="0 0 6" />
              <triangle xyz3="0 0 6" xyz2="3 0 6" xyz1="0 0 9" />
              <triangle xyz1="3 0 3" xyz2="3 0 0" xyz3="0 0 3" />
              <triangle xyz1="3 0 6" xyz2="3 0 3" xyz3="0 0 6" />
              <triangle xyz1="3 0 6" xyz2="3 0 3" xyz3="0 0 6" />
              <triangle xyz1="3 0 0" xyz2="3 0 3" xyz3="6 0 0" />
              <triangle xyz3="6 0 3" xyz2="3 0 3" xyz1="6 0 0" />
              <triangle xyz1="3 0 3" xyz2="3 0 6" xyz3="6 0 6" />
              <triangle xyz1="3 0 3" xyz2="6 0 6" xyz3="6 0 3" />
              <triangle xyz1="6 0 3" xyz2="6 0 6" xyz3="9 0 6" />
              <triangle xyz1="6 0 3" xyz2="9 0 6" xyz3="9 0 3" />
              <triangle xyz1="3 0 6" xyz2="3 0 9" xyz3="6 0 9" />
              <triangle xyz1="3 0 6" xyz2="6 0 9" xyz3="6 0 6" />
              <triangle xyz1="6 0 6" xyz2="6 0 9" xyz3="9 0 9" />
              <triangle xyz1="6 0 6" xyz2="9 0 9" xyz3="9 0 6" />
      <!--        
              <triangle xyz1="0 0 0" xyz2="0 0 2" xyz3="1 2.4 0" />
              <triangle xyz1="0 0 2" xyz2="1 2.4 2" xyz3="1 2.4 0" />
              
              <triangle xyz1="0 0 2" xyz2="2 0 2" xyz3="1 2.4 2" />

     -->
              
              <!-- Primitivas : rectangle, triangle, cylinder, sphere, torus -->
              <!--   Comandos a serem interpretados genericamente como em OpenGL/GLUT, exceto -->
              <!--   o cilindro, que deve adicionalmente ter topos ou tampas) -->
              <!-- <rectangle xy1="ff ff" xy2="ff ff" />
               
                <cylinder base="ff" top="ff" height="ff" slices="ii" stacks="ii" /> -->     <!-- deve ter topos -->
               <!-- <sphere radius="ff" slices="ii" stacks="ii" />
                <torus inner="ff" outer="ff" slices="ii" loops="ii" />-->
             </primitives>
               
             <!-- bloco "descendants" -->
            <descendants>
                <!-- Referencia a outros elementos do grafo -->
                <!-- (repetir o no. de vezes necessario) -->
                <!-- LEMBRANDO: qualquer no' pode ser referenciado previamente 'a sua declaracao; isto -->
                <!--            e', a ordem pela qual os nos sao declarados e' irrelevante -->
              <noderef id="ss1"> </noderef>
            </descendants>
        </node>
    </graph>
</anf>
